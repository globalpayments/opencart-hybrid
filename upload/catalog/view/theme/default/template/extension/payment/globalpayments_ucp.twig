<form id="globalpayments-payment-form" name="checkout" action="{{ action }}" method="POST" class="form-horizontal">
  <div id="globalpayments-alert" class="alert alert-danger" style="display:none;"></div>
  <div id="globalpayments-loading" style="text-align: center"><i class="fa fa-spinner fa-pulse fa-2x fa-fw"></i> <span>{{ text_loading }}</span></div>
  {% if customer_is_logged and stored_payment_methods %}
  <div id="globalpayments-choose" class="form-horizontal">
    <ul class="nav nav-tabs">
      <li role="presentation" id="tab-saved"{% if payment_tab_option == 'saved' %} class="active"{% endif %}><a href="#" class="globalpayments-tab-link globalpayments-button" id="saved-link">{{ entry_saved_methods }}</a></li>
      <li role="presentation" id="tab-new"{% if payment_tab_option == 'new' %} class="active"{% endif %}><a href="#" class="globalpayments-tab-link globalpayments-button" id="new-link">{{ entry_new }}</a></li>
    </ul>
  </div>
  {% endif %}
  <input type="hidden" name="{{ gateway.gatewayId }}[paymentType]" value="{{ payment_tab_option }}" id="tab-option" />
  <div class="globalpayments" style="width: 600px; margin: auto">
    <fieldset id="{{ gateway.gatewayId }}-payment-token"{% if payment_tab_option != 'saved' %} style="display: none"{% endif %}>
    {% for stored_payment_method in stored_payment_methods %}
      <div class="radio">
        <label>
          <input type="radio" id="{{ gateway.gatewayId }}-payment-token-{{ stored_payment_method.token_id }}" name="{{ gateway.gatewayId }}[paymentTokenId]" value="{{ stored_payment_method.token_id }}"
          {% if stored_payment_method.is_default %}
            checked="checked"
          {% endif %}>
          {{ stored_payment_method.card_type }} {{ text_ending_in }} {{ stored_payment_method.card_last4 }} ({{ text_expires }} {{ stored_payment_method.expiry_month }}/{{ stored_payment_method.expiry_year }})
        </label>
      </div>
    {% endfor %}
    </fieldset>
    <fieldset id="{{ gateway.gatewayId }}-card"{% if payment_tab_option != 'new' %} style="display: none"{% endif %}>
      <!-- Target for the credit card form -->
      {% for field in secure_payment_fields %}
        {{ field }}
      {% endfor %}
      {% if customer_is_logged and gateway.allowCardSaving %}
      <div class="checkbox">
        <label>
          <input type="checkbox" id="{{ gateway.gatewayId }}-save_card" value="1" name="{{ gateway.gatewayId }}[saveCard]" /> {{ entry_allow_card_saving }}
        </label>
      </div>
      {% endif %}
    </fieldset>
  </div>
    <div class="buttons clearfix">
      <div class="pull-right">
        <input type="button" value="{{ button_confirm }}" id="button-confirm" style="width: 300px" data-loading-text="{{ text_loading }}" class="btn btn-primary" />
      </div>
    </div>
</form>
<style>
  .globalpayments iframe {
    min-height: 5rem;
    width: 100%;
  }

  div[id^="GlobalPayments-overlay-"] {
    z-index: 1001 !important;
  }

  .globalpayments-validation-error, .globalpayments-sandbox-warning {
    list-style:none outside;
  }

  /* Styles for disabled div during AJAX calls */
  .disabled-during-ajax {
    position: relative !important;
  }

  .disabled-during-ajax * {
    cursor: not-allowed !important;
  }

  #ajax-overlay {
    cursor: wait !important;
  }

  /* Loading animation for better UX */
  @keyframes pulse {
    0% { opacity: 0.6; }
    50% { opacity: 0.3; }
    100% { opacity: 0.6; }
  }

  .disabled-during-ajax {
    animation: pulse 1.5s infinite;
  }
</style>
<script type="text/javascript">
	$('body').on('click', '.globalpayments-tab-link', function(event) {
		event.preventDefault();
		if ($(this).attr('id') == 'saved-link') {
			$('#tab-option').val('saved');
			$('#tab-saved').addClass('active');
			$('#tab-new').removeClass('active');
			$('#{{ gateway.gatewayId }}-payment-token').show();
			$('#{{ gateway.gatewayId }}-card').hide();
		} else {
			$('#tab-option').val('new');
			$('#tab-new').addClass('active');
			$('#tab-saved').removeClass('active');
			$('#{{ gateway.gatewayId }}-payment-token').hide();
			$('#{{ gateway.gatewayId }}-card').show();
		}
	});

	$('#globalpayments-loading').hide();
	var globalpayments_secure_payment_fields_params = {{ globalpayments_secure_payment_fields_params }};
	var globalpayments_secure_payment_threedsecure_params = {{ globalpayments_secure_payment_threedsecure_params }};
	$.getScript(
		'https://js.globalpay.com/{{ js_lib_version }}/globalpayments.js', function () {
			$.getScript('catalog/view/javascript/globalpayments-3ds.min.js');
			$.getScript('https://malsup.github.io/jquery.blockUI.js');

			/**
			 * Helper functions for managing div states during AJAX calls
			 */
			function disablePaymentForm() {
				$('#globalpayments-payment-form').addClass('disabled-during-ajax');
				$('#globalpayments-payment-form').css({
					'pointer-events': 'none',
					'opacity': '0.6',
					'position': 'relative'
				});

				// Add overlay to prevent interactions
				if (!$('#ajax-overlay').length) {
					$('#globalpayments-payment-form').append('<div id="ajax-overlay" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255,255,255,0.3); z-index: 1000; cursor: wait;"></div>');
				}
			}

			function enablePaymentForm() {
				$('#globalpayments-payment-form').removeClass('disabled-during-ajax');
				$('#globalpayments-payment-form').css({
					'pointer-events': 'auto',
					'opacity': '1'
				});
				$('#ajax-overlay').remove();
			}

			/**
			 * Frontend code for Global Payments
			 *
			 * @param {object} options
			 */
			function GlobalPaymentsGatewayProvider (options, threeDSecureOptions) {
				/**
				 * Card form instance
				 *
				 * @type {any}
				 */
				this.cardForm = {};

				/**
				 * Payment gateway id
				 *
				 * @type {string}
				 */
				this.id = options.id;

				/**
				 * Payment field options
				 *
				 * @type {object}
				 */
				this.fieldOptions = options.fieldOptions;

				/**
				 * Payment field styles
				 */
				this.fieldStyles = options.fieldStyles;

				/**
				 * Payment gateway options
				 *
				 * @type {object}
				 */
				this.gatewayOptions = options.gatewayOptions;

				/**
				 * 3DS endpoints
				 */
				this.threedsecure = threeDSecureOptions.threedsecure;

				/**
				 * Order info
				 */
				this.order = threeDSecureOptions.order;

				/**
				 *
				 * @type {null}
				 */
				this.paymentTokenResponse = null;

				this.attachEventHandlers();
			};

			GlobalPaymentsGatewayProvider.prototype = {
				/**
				 * Add important event handlers for controlling the payment experience during checkout
				 *
				 * @returns
				 */
				attachEventHandlers: function () {
					var self = this;

					// General
					$(document).ready(function () {
						self.renderPaymentFields();
					});

					$('body').on('click', '.globalpayments-tab-link', function() {
						self.toggleSubmitButtons();
					});

					$(document).ready(function () {
						$(self.getPlaceOrderButtonSelector()).on('click', function ($e) {
							$e.preventDefault();
							$e.stopImmediatePropagation();
							if (!self.gatewayOptions.enableThreeDSecure) {
								self.submitForm();
							}
							self.threeDSecure();
							return;
						});
					});
				},

				/**
				 * Renders the payment fields using GlobalPayments.js. Each field is securely hosted on
				 * Global Payments' production servers.
				 *
				 * @returns
				 */
				renderPaymentFields: function () {
					if (!this.gatewayOptions.accessToken) {
						if (
							$('#' + this.id + '-' + this.fieldOptions['card-number-field'].class).children().length > 0
						) {
							return;
						}
					}
					if (!(window).GlobalPayments.configure) {
						console.log('Warning! Payment fields cannot be loaded (JS).');
						return;
					}

					var gatewayConfig = this.gatewayOptions;
					if (this.gatewayOptions.error) {
						this.showPaymentError(this.gatewayOptions.message);
					}

					let acceptBlik = (gatewayConfig.enableBlik === 1) ? true : false;
					let acceptOpenBanking = (gatewayConfig.enableOpenbanking === 1) ? true : false;
					let apmsEnabled = (acceptBlik || acceptOpenBanking) ? true : false;
					console.log('{{base_currency}}','{{base_country}}');
					var base_currency = '{{base_currency}}';
					var base_country  = '{{base_country}}';
					if (apmsEnabled) {
						gatewayConfig.apms = {
							currencyCode: base_currency,
							countryCode: base_country,
							allowedCardNetworks: [
								GlobalPayments.enums.CardNetwork.Visa,
								GlobalPayments.enums.CardNetwork.Mastercard,
								GlobalPayments.enums.CardNetwork.Amex,
								GlobalPayments.enums.CardNetwork.Discover
							],
							nonCardPayments: {
								allowedPaymentMethods: [{
									provider: GlobalPayments.enums.ApmProviders.Blik,
									enabled: true
								}]
							}
						};

						// using push because Open Banking doesn't respect the 'enabled' property currently
						if (acceptOpenBanking) {
							gatewayConfig.apms.nonCardPayments.allowedPaymentMethods.push(
								{
								provider: GlobalPayments.enums.ApmProviders.OpenBanking,
								enabled: acceptOpenBanking,
								category: "TBD"
								}
							)
						}
					}

					// ensure the submit button's parent is on the page as this is added
					// only after the initial page load
					if ($(this.getSubmitButtonTargetSelector(this.id)).length === 0) {
						this.createSubmitButtonTarget(this.id);
					}

					(window).GlobalPayments.configure(gatewayConfig);
					// Utilize Drop-in UI for GP API
					if (gatewayConfig.accessToken) {
						var formConfig = {
							style: "gp-default"
						};

						// Only add amount and apms when BLIK is enabled
						if (apmsEnabled) {
							formConfig.amount = this.order.amount ? this.order.amount : '0';
							formConfig.apms = [];
						}
						this.cardForm = GlobalPayments.creditCard.form(
							'#' + this.id + '-' + this.fieldOptions['payment-form'].class,
							formConfig
						)
					} else {
						this.cardForm = GlobalPayments.ui.form(
							{
								fields: this.getFieldConfiguration(),
								styles: this.getStyleConfiguration()
							}
						);
					}

						// To initiate blik transaction process
					this.cardForm.on(GlobalPayments.enums.ApmEvents.PaymentMethodSelection, (paymentProviderData, event) => {
							const {
								provider,
								countryCode,
								currencyCode,
								bankName,
								acquirer
							} = paymentProviderData;
							console.log('Selected provider: ' + provider);

							// Prevent any default form submission behavior for BLIK
							if (provider === GlobalPayments.enums.ApmProviders.Blik) {
								console.log('inside blik');
								// Prevent default form submission if event is available
								if (event) {
									event.preventDefault();
									event.stopPropagation();
								}
								// Also prevent any form submission on the page
								$('form').off('submit.blik').on('submit.blik', function(e) {
									console.log('Form submission prevented for BLIK payment');
									e.preventDefault();
									e.stopImmediatePropagation();
									return false;
								});
							}

							if (provider === GlobalPayments.enums.ApmProviders.OpenBanking) {
								// Prevent default form submission if event is available
								if (event) {
									event.preventDefault();
									event.stopPropagation();
								}
								// Also prevent any form submission on the page
								$('form').off('submit.open-banking').on('submit.open-banking', function(e) {
									console.log('Form submission prevented for Open Banking payment');
									e.preventDefault();
									e.stopImmediatePropagation();
									return false;
								});
							}

							let detail = {};

							switch (provider) {
								case GlobalPayments.enums.ApmProviders.Blik:
									console.log('BLIK payment method selected');

									// IMPORTANT: Do NOT call helper.placeOrder() here as it causes form submission
									// Make AJAX call to process Blik transaction
									var ajaxUrl = 'index.php?route=extension/payment/apm_middleware/confirm';
									var ajaxData = {
										payment_method: 'blik',
										gateway_id: this.id,
										action: 'initiate_sale'
									};

									// Add order data if available
									if (this.order) {
										if (this.order.amount) ajaxData.amount = this.order.amount;
										if (this.order.currency) ajaxData.currency = this.order.currency;
									}
									console.log('BLIK AJAX Data:', ajaxData);

									// Show AJAX loader and disable entire payment form
									$('#globalpayments-loading').show();
									disablePaymentForm();

									$.ajax({
										url: ajaxUrl,
										type: 'POST',
										dataType: 'json',
										data: ajaxData,
										success: function(response_data) {
											var response = JSON.parse(JSON.stringify(response_data));
											console.log(response);
											if (response.success && response.redirect_url) {
													// Create detail object with actual redirect URL from response
													const detail = {
														provider,
														redirect_url: response.redirect_url,
													};
													// Dispatch the custom event with actual redirect URL
													const merchantCustomEventProvideDetails = new CustomEvent(GlobalPayments.enums.ApmEvents.PaymentMethodActionDetail, {
														detail: detail
													});
													window.dispatchEvent(merchantCustomEventProvideDetails);

													console.log('Redirecting to:', response.redirect_url);

											} else {
												// Handle error response
												var errorMessage = 'Payment processing failed. Please try again.';
												if (response.error_message) {
													errorMessage = response.error_message;
												} else if (response.message) {
													errorMessage = response.message;
												}

												// Show error message using jQuery to create alert
												var $form = $('#globalpayments-payment-form');
												$('.globalpayments-checkout-error').remove();
												$form.prepend('<div class="alert alert-danger globalpayments-checkout-error">' + errorMessage + '</div>');
												$('html, body').animate({
													scrollTop: ($form.offset().top - 100)
												}, 1000);

												console.error('Payment Error:', response);
											}
										},error: function(xhr, status, error) {
											// Handle AJAX error
											var errorMessage = 'Connection error occurred. Please check your internet connection and try again.';
											if (xhr.responseJSON && xhr.responseJSON.message) {
												errorMessage = xhr.responseJSON.message;
											}

											// Show error message using jQuery to create alert
											var $form = $('#globalpayments-payment-form');
											$('.globalpayments-checkout-error').remove();
											$form.prepend('<div class="alert alert-danger globalpayments-checkout-error">' + errorMessage + '</div>');
											$('html, body').animate({
												scrollTop: ($form.offset().top - 100)
											}, 1000);

											console.error('AJAX Error:', xhr, status, error);
										},
										complete: function() {
											// Hide AJAX loader and re-enable button
											$('#globalpayments-loading').hide();
											enablePaymentForm();
										}
									});

									// Return early to prevent further processing
									return;
									break;
								case GlobalPayments.enums.ApmProviders.OpenBanking:
									console.log('bankName',bankName);
									if(!bankName){
										detail = {
											provider,
											redirect_url: "https://fluentlenium.com/",
											countryCode,
											currencyCode,
										}
									} else {

											$('#globalpayments-loading').show();
											disablePaymentForm();
											// IMPORTANT: Do NOT call helper.placeOrder() here as it causes form submission
											// Make AJAX call to process Open Banking transaction
											var self = this;
											var ajaxUrl = 'index.php?route=extension/payment/apm_middleware/confirm';
											var ajaxData = {
												payment_method: 'open_banking',
												gateway_id: this.id,
												action: 'initiate_sale'
											};

											// Add order data if available
											if (this.order) {
												if (this.order.amount) ajaxData.amount = this.order.amount;
												if (this.order.currency) ajaxData.currency = this.order.currency;
											}
											ajaxData.bank = bankName;
											console.log('Open Banking AJAX Data:', ajaxData);

											$.ajax({
												url: ajaxUrl,
												type: 'POST',
												dataType: 'json',
												data: ajaxData,
												success: function(response_data) {
													
													var response = JSON.parse(JSON.stringify(response_data));
													console.log(response);
										
													if (response.success && response.redirect_url) {
															// Create detail object with actual redirect URL from response
															const detail = {
																provider,
																redirect_url: response.redirect_url,
															};
															// Dispatch the custom event with actual redirect URL
															const merchantCustomEventProvideDetails = new CustomEvent(GlobalPayments.enums.ApmEvents.PaymentMethodActionDetail, {
																detail: detail
															});
															window.dispatchEvent(merchantCustomEventProvideDetails);

															console.log('Redirecting to:', response.redirect_url);

													} else {
														// Handle error response
														var errorMessage = 'Payment processing failed. Please try again.';
														if (response.error_message) {
															errorMessage = response.error_message;
														} else if (response.message) {
															errorMessage = response.message;
														}

														// Show error message using jQuery to create alert
														var $form = $('#globalpayments-payment-form');
														$('.globalpayments-checkout-error').remove();
														$form.prepend('<div class="alert alert-danger globalpayments-checkout-error">' + errorMessage + '</div>');
														$('html, body').animate({
															scrollTop: ($form.offset().top - 100)
														}, 1000);

														console.error('Payment Error:', response);
													}
												},
												error: function(xhr, status, error) {
													// Handle AJAX error
													var errorMessage = 'Connection error occurred. Please check your internet connection and try again.';
													if (xhr.responseJSON && xhr.responseJSON.message) {
														errorMessage = xhr.responseJSON.message;
													}

													// Show error message using jQuery to create alert
													var $form = $('#globalpayments-payment-form');
													$('.globalpayments-checkout-error').remove();
													$form.prepend('<div class="alert alert-danger globalpayments-checkout-error">' + errorMessage + '</div>');
													$('html, body').animate({
														scrollTop: ($form.offset().top - 100)
													}, 1000);

													console.error('AJAX Error:', xhr, status, error);
												},
												complete: function() {
													// Hide AJAX loader and re-enable button
													$('#globalpayments-loading').hide();
													enablePaymentForm();
												}
											});
									}
									break;
								default:
									detail = {
										"seconds_to_expire": "900",
										"next_action": "REDIRECT_IN_FRAME",
										"redirect_url": 'https://google.com/',
										provider,
									};
									break;
							}
							const merchantCustomEventProvideDetails = new CustomEvent(GlobalPayments.enums.ApmEvents.PaymentMethodActionDetail, {
								detail: detail
							});
							if (!bankName) window.dispatchEvent(merchantCustomEventProvideDetails);
							return 0;
						});
					this.cardForm.on('submit', 'click', this.blockOnSubmit.bind(this));
					this.cardForm.on('token-success', this.handleResponse.bind(this));
					this.cardForm.on('token-error', this.handleErrors.bind(this));
					this.cardForm.on('error', this.handleErrors.bind(this));
					this.cardForm.on('card-form-validity', (isValid) => {
						if (!isValid) {
							this.unblockOnError();
						}
					});
					(window).GlobalPayments.on('error', this.handleErrors.bind(this));

					// match the visibility of our payment form
					this.cardForm.ready(function () {
						this.toggleSubmitButtons();
					});
				},

				/**
				 * Gets payment field config
				 *
				 * @returns {object}
				 */
				getFieldConfiguration: function () {
					return {
						'card-number': {
							placeholder: this.fieldOptions['card-number-field'].placeholder,
							target: '#' + this.id + '-' + this.fieldOptions['card-number-field'].class
						},
						'card-expiration': {
							placeholder: this.fieldOptions['card-expiry-field'].placeholder,
							target: '#' + this.id + '-' + this.fieldOptions['card-expiry-field'].class
						},
						'card-cvv': {
							placeholder: this.fieldOptions['card-cvv-field'].placeholder,
							target: '#' + this.id + '-' + this.fieldOptions['card-cvv-field'].class
						},
						'card-holder-name': {
							placeholder: this.fieldOptions['card-holder-field'].placeholder,
							target: '#' + this.id + '-' + this.fieldOptions['card-holder-field'].class
						},
						'submit': {
							text: this.getSubmitButtonText(),
							target: this.getSubmitButtonTargetSelector(this.id)
						}
					};
				},

				/**
				 * Gets payment field styles
				 *
				 * @returns {object}
				 */
				getStyleConfiguration: function () {
					return JSON.parse(this.fieldStyles);
				},

				/**
				 * Creates the parent for the submit button
				 *
				 * @returns
				 */
				createSubmitButtonTarget: function (id) {
					var el = document.createElement('div')
					el.id = this.getSubmitButtonTargetSelector(id).replace('#', '');
					el.className = 'globalpayments ' + id + ' card-submit';
					$(this.getPlaceOrderButtonSelector()).after(el);
					// match the visibility of our payment form
					this.toggleSubmitButtons();
				},

				/**
				 * Swaps the default Platform 'Place Order' button for our iframe-d button
				 * or digital wallet buttons when one of our gateways is selected.
				 *
				 * @returns
				 */
				toggleSubmitButtons: function () {
					// our gateway was selected
					var selectedPaymentGatewayId = this.id;

					// stored Cards available (registered user selects stored card as payment method)
					var savedCardsAvailable = $(this.getStoredPaymentMethodsRadioSelector(selectedPaymentGatewayId) + '[value!="new"]').length > 0;

					// user selects (new) card as payment method
					var newSavedCardSelected = 'new' === $('#tab-option').val();

					// selected payment method is card or digital wallet
					if (!savedCardsAvailable || savedCardsAvailable && newSavedCardSelected) {
						$(this.getSubmitButtonTargetSelector(selectedPaymentGatewayId)).show();
						$(this.getPlaceOrderButtonSelector()).addClass('globalpayments-hidden').hide();
					} else {
						// selected payment method is stored card
						$(this.getSubmitButtonTargetSelector(selectedPaymentGatewayId)).hide();
						// show platform `Place Order` button
						$(this.getPlaceOrderButtonSelector()).removeClass('globalpayments-hidden').show();
					}
				},

				/**
				 * Gets the current checkout form
				 *
				 * @returns {Element}
				 */
				getForm: function () {
					var checkoutForms = [
						// Checkout
						'form#globalpayments-payment-form',
					]
					var forms = document.querySelectorAll(checkoutForms.join(','));

					return forms.item(0);
				},

				/**
				 * Places/submits the order to Platform
				 *
				 * @returns
				 */
				placeOrder: function () {
					$(this.getForm()).submit();
				},

				/**
				 * Handles the tokenization response
				 *
				 * On valid payment fields, the tokenization response is added to the current
				 * state.
				 *
				 * @param {object} response tokenization response
				 *
				 * @returns
				 */
				handleResponse: function (response) {
					if (!this.validateTokenResponse(response)) {
						return;
					}

					var responseDetails = {
						details: {
							cardType: response.details.cardType,
							cardLast4: response.details.cardLast4,
							expiryMonth: response.details.expiryMonth,
							expiryYear: response.details.expiryYear,
							cardholderName: response.details.cardholderName,
						},
						paymentReference: response.paymentReference
					}

					this.paymentTokenResponse = JSON.stringify(responseDetails);

					this.createInputElement('paymentTokenResponse', this.paymentTokenResponse);
					if (!this.gatewayOptions.enableThreeDSecure) {
						this.submitForm();
					} else {
						this.threeDSecure();
					}
				},

				submitForm: function() {
					var _form = this.getForm();
					var $form = $(_form);
					$form.submit();
				},

				/**
				 * 3DS Process
				 */
				threeDSecure: function () {
					this.blockOnSubmit();
					var self = this;
					var _form = this.getForm();
					var $form = $(_form);

					var paymentTokenId = 'new';
					var paymentOption = $('#tab-option').val();
					if (paymentOption === 'saved') {
						paymentTokenId = $('input[name="' + this.id + '[paymentTokenId]"]:checked').val();
					}

					(window).GlobalPayments.ThreeDSecure.checkVersion(this.threedsecure.checkEnrollmentUrl, {
						paymentTokenResponse: this.paymentTokenResponse,
						paymentTokenId: paymentTokenId,
						order: this.order,
					})
						.then(function (versionCheckData) {
							if (versionCheckData.error) {
								self.showPaymentError(versionCheckData.message);
								return false;
							}
							if ('NOT_ENROLLED' === versionCheckData.status && 'YES' !== versionCheckData.liabilityShift) {
								self.showPaymentError( "{{ error_card_decline }}" );
								return false;
							}
							if ('NOT_ENROLLED' === versionCheckData.status && 'YES' === versionCheckData.liabilityShift) {
								$form.submit();
								return true
							}

							(window).GlobalPayments.ThreeDSecure.initiateAuthentication(self.threedsecure.initiateAuthenticationUrl, {
								paymentTokenResponse: self.paymentTokenResponse,
								paymentTokenId: paymentTokenId,
								serverTransactionId: versionCheckData.serverTransactionId,
								challengeWindow: {
									windowSize: (window).GlobalPayments.ThreeDSecure.ChallengeWindowSize.Windowed500x600,
									displayMode: 'lightbox',
								},
								order: self.order,
							})
								.then(function (authenticationData) {
									if (authenticationData.error) {
										self.showPaymentError(authenticationData.message);
										return false;
									}
									self.createInputElement('serverTransactionId', authenticationData.serverTransactionId || authenticationData.challenge.response.data.threeDSServerTransID || versionCheckData.serverTransactionId);
									$form.submit();
									return true;
								})
								.catch(function (error) {
									console.error(error)
									self.showPaymentError('Something went wrong while doing 3DS processing.');
									return false;
								});
						})
						.catch(function (error) {
							console.error(error)
							self.showPaymentError('Something went wrong while doing 3DS processing.');
							return false;
						});

					$(document).on('click', 'img[id^="GlobalPayments-frame-close-"]', this.cancelTransaction.bind(this));

					return false;
				},

				/**
				 * Assists with notifying the challenge status, when the user closes the challenge window
				 */
				cancelTransaction: function () {
					window.parent.postMessage({
						data: { "transStatus": "N" },
						event: "challengeNotification"
					}, window.location.origin);
				},

				/**
				 * Validates the tokenization response
				 *
				 * @param {object} response tokenization response
				 *
				 * @returns {boolean} status of validations
				 */
				validateTokenResponse: function (response) {
					this.resetValidationErrors();

					var result = true;

					if (response.details) {
						var expirationDate = new Date(response.details.expiryYear, response.details.expiryMonth - 1);
						var now = new Date();
						var thisMonth = new Date(now.getFullYear(), now.getMonth());

						if (!response.details.expiryYear || !response.details.expiryMonth || expirationDate < thisMonth) {
							this.showValidationError('card-expiration');
							result = false;
						}
					}

					if (response.details && !response.details.cardSecurityCode) {
						this.showValidationError('card-cvv');
						result = false;
					}

					return result;
				},

				/**
				 * Hides all validation error messages
				 *
				 * @returns
				 */
				resetValidationErrors: function () {
					$('.' + this.id + ' .globalpayments-validation-error').hide();
					$('.globalpayments-checkout-error').hide();
				},

				/**
				 * Shows the validation error for a specific payment field
				 *
				 * @param {string} fieldType Field type to show its validation error
				 *
				 * @returns
				 */
				showValidationError: function (fieldType) {
					$('.' + this.id + '.' + fieldType + ' .globalpayments-validation-error').addClass('alert alert-danger');
					$('.' + this.id + '.' + fieldType + ' .globalpayments-validation-error').show();
					this.unblockOnError();
				},

				/**
				 * Shows payment error and scrolls to it
				 *
				 * @param {string} message Error message
				 *
				 * @returns
				 */
				showPaymentError: function (message) {
					var $form = $(this.getForm());

					// Remove notices from all sources
					$('.globalpayments-checkout-error').remove();

					$form.prepend('<div class="alert alert-danger globalpayments-checkout-error">' + message + '</div>');

					$('html, body').animate({
						scrollTop: ($form.offset().top - 100)
					}, 1000);

					this.unblockOnError();
				},

				/**
				 * Handles errors from the payment field iframes
				 *
				 * @param {object} error Details about the error
				 *
				 * @returns
				 */
				handleErrors: function (error) {
					this.resetValidationErrors();
					if (!error.reasons) {
						this.showPaymentError('Something went wrong. Please contact us to get assistance.');
						return;
					}

					var numberOfReasons = error.reasons.length;
					for (var i = 0; i < numberOfReasons; i++) {
						var reason = error.reasons[i];
						switch (reason.code) {
							case 'NOT_AUTHENTICATED':
								this.showPaymentError('We\'re not able to process this payment. Please refresh the page and try again.')
								break;
							case 'ERROR':
								if (reason.message == "IframeField: target cannot be found with given selector") {
									break;
								}
								this.showPaymentError(reason.message);
								break;
							default:
								this.showPaymentError(reason.message);
						}
					}
				},

				/**
				 * Gets submit button text
				 *
				 * @returns {string}
				 */
				getSubmitButtonText: function () {
					return ($(this.getPlaceOrderButtonSelector()).data('value') || $(this.getPlaceOrderButtonSelector()).attr('value'));
				},

				/**
				 * Blocks checkout UI
				 *
				 * @returns
				 */
				blockOnSubmit: function () {
					var $form = $( this.getForm() );
					var form_data = $form.data();
					if ( 1 !== form_data['blockUI.isBlocked'] ) {
						$form.block({
							message: null,
							overlayCSS: {
								background: '#fff',
								opacity: 0.6
							}
						});
					}
				},

				createInputElement: function (name, value) {
					var inputElement = (document.getElementById(this.id + '-' + name));

					if (!inputElement) {
						inputElement = document.createElement('input');
						inputElement.id = this.id + '-' + name;
						inputElement.name = this.id + '[' + name + ']';
						inputElement.type = 'hidden';
						this.getForm().appendChild(inputElement);
					}

					inputElement.value = value;
				},

				/**
				 * Unblocks checkout UI
				 *
				 * @returns
				 */
				unblockOnError: function () {
					var $form = $(this.getForm());
					var form_data = $form.data();
					if (1 == form_data['blockUI.isBlocked']) {
						$form.unblock();
					}
				},

				/**
				 * Convenience function to get CSS selector for the built-in 'Place Order' button
				 *
				 * @returns {string}
				 */
				getPlaceOrderButtonSelector: function () {
					return '#button-confirm';
				},

				/**
				 * Convenience function to get CSS selector for the custom 'Place Order' button's parent element
				 *
				 * @param {string} id
				 * @returns {string}
				 */
				getSubmitButtonTargetSelector: function (id) {
					return '#' + id + '-card-submit';
				},

				/**
				 * Convenience function to get CSS selector for stored card radio inputs
				 *
				 * @returns {string}
				 */
				getStoredPaymentMethodsRadioSelector: function (id) {
					return 'input:radio[name="' + id + '[paymentTokenId]"]';
				},
			};

			new GlobalPaymentsGatewayProvider(globalpayments_secure_payment_fields_params, globalpayments_secure_payment_threedsecure_params);
		}
	);
</script>
